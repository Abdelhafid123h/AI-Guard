from transformers import pipeline
import spacy
import os

class NLPModels:
    def __init__(self):
        print("üîÑ Initialisation des mod√®les NLP...")
        
        # 1. Mod√®le spaCy fran√ßais
        try:
            self.spacy_model = spacy.load("fr_core_news_sm")
            print("‚úÖ Mod√®le spaCy fran√ßais charg√©")
        except OSError:
            print("‚ö†Ô∏è Mod√®le spaCy fran√ßais non trouv√©. Installation requise : python -m spacy download fr_core_news_sm")
            self.spacy_model = None
        
        # 2. Mod√®le BERT original (multilingue)
        try:
            self.bert_model = pipeline(
                "ner",
                model="dslim/bert-base-NER",
                aggregation_strategy="simple",
                device=-1  # CPU
            )
            print("‚úÖ Mod√®le BERT multilingue charg√©")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur chargement BERT : {e}")
            self.bert_model = None
        
        # 3. NOUVEAU : Mod√®le CamemBERT fran√ßais sp√©cialis√©
        try:
            print("üì¶ Tentative de chargement de CamemBERT...")
            self.camembert_model = pipeline(
                "ner",
                model="Jean-Baptiste/camembert-ner",
                aggregation_strategy="simple",
                device=-1,  # CPU
                return_all_scores=False,
                trust_remote_code=True
            )
            print("‚úÖ Mod√®le CamemBERT fran√ßais charg√©")
        except Exception as e:
            print(f"‚ö†Ô∏è CamemBERT non disponible : {str(e)[:100]}...")
            self.camembert_model = None
        
        # 4. NOUVEAU : Mod√®le fran√ßais alternatif (plus l√©ger)
        try:
            print("üì¶ Tentative de chargement du mod√®le fran√ßais alternatif...")
            # Utilisons un mod√®le plus simple et fiable
            self.french_model = pipeline(
                "ner",
                model="dbmdz/bert-large-cased-finetuned-conll03-english",  # Mod√®le plus stable
                aggregation_strategy="simple",
                device=-1
            )
            print("‚úÖ Mod√®le fran√ßais alternatif charg√©")
        except Exception as e:
            print(f"‚ö†Ô∏è Mod√®le alternatif non disponible : {str(e)[:100]}...")
            self.french_model = None
            
        print("üéØ Initialisation des mod√®les termin√©e")
        
    def get_available_models(self):
        """Retourne la liste des mod√®les disponibles"""
        models = []
        if self.bert_model:
            models.append("BERT (multilingue)")
        if self.camembert_model:
            models.append("CamemBERT (fran√ßais)")
        if hasattr(self, 'french_model') and self.french_model:
            models.append("Mod√®le fran√ßais alternatif")
        if self.spacy_model:
            models.append("spaCy (fran√ßais)")
        return models
