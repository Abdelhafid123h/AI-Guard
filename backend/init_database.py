import sqlite3
import json
import os
from pathlib import Path
import logging

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_database():
    """Initialise la base de donn√©es AI-Guards avec le sch√©ma complet"""
    
    # Chemin vers la base de donn√©es
    db_path = Path("backend/app/database/ai_guards.db")
    db_path.parent.mkdir(parents=True, exist_ok=True)
    
    try:
        # Connexion √† la base de donn√©es
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Cr√©ation des tables
        cursor.executescript('''
        -- Table des types de protection (Guards)
        CREATE TABLE IF NOT EXISTS guard_types (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(50) UNIQUE NOT NULL,
            display_name VARCHAR(100) NOT NULL,
            description TEXT,
            icon VARCHAR(10),
            color VARCHAR(7),
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- Table des champs PII configurables
        CREATE TABLE IF NOT EXISTS pii_fields (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            guard_type_id INTEGER NOT NULL,
            field_name VARCHAR(50) NOT NULL,
            display_name VARCHAR(100) NOT NULL,
            detection_type VARCHAR(20) NOT NULL CHECK (detection_type IN ('regex', 'ner', 'hybrid')),
            example_value TEXT,
            regex_pattern TEXT,
            ner_entity_type VARCHAR(50),
            confidence_threshold FLOAT DEFAULT 0.7,
            is_active BOOLEAN DEFAULT 1,
            priority INTEGER DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (guard_type_id) REFERENCES guard_types (id) ON DELETE CASCADE,
            UNIQUE(guard_type_id, field_name)
        );

        -- Table des patterns regex r√©utilisables
        CREATE TABLE IF NOT EXISTS regex_patterns (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name VARCHAR(50) UNIQUE NOT NULL,
            display_name VARCHAR(100) NOT NULL,
            pattern TEXT NOT NULL,
            description TEXT,
            test_examples TEXT,
            flags VARCHAR(20) DEFAULT 'i',
            is_active BOOLEAN DEFAULT 1,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- Table des types d'entit√©s NER disponibles
        CREATE TABLE IF NOT EXISTS ner_entity_types (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            model_name VARCHAR(50) NOT NULL,
            entity_type VARCHAR(50) NOT NULL,
            display_name VARCHAR(100) NOT NULL,
            description TEXT,
            is_active BOOLEAN DEFAULT 1,
            UNIQUE(model_name, entity_type)
        );
        ''')
        
        # Insertion des donn√©es initiales
        logger.info("Insertion des types de protection initiaux...")
        
        # Types de protection par d√©faut
        guard_types_data = [
            ('TypeA', 'üÜî Donn√©es Personnelles Identifiantes', 'Protection des informations d\'identit√© personnelle', 'üÜî', '#e74c3c'),
            ('TypeB', 'üí≥ Donn√©es Financi√®res', 'Protection des informations bancaires et financi√®res', 'üí≥', '#f39c12'),
            ('InfoPerso', 'üìç Donn√©es de Contact', 'Protection des informations de contact et localisation', 'üìç', '#3498db')
        ]
        
        cursor.executemany('''
            INSERT OR IGNORE INTO guard_types (name, display_name, description, icon, color)
            VALUES (?, ?, ?, ?, ?)
        ''', guard_types_data)
        
        # Patterns regex par d√©faut
        logger.info("Insertion des patterns regex...")
        
        regex_patterns_data = [
            ('french_phone', 'T√©l√©phone Fran√ßais', r'(\+33|0)[1-9](?:[0-9]{8})', 
             'Num√©ros de t√©l√©phone fran√ßais', '["06 12 34 56 78", "+33 6 12 34 56 78", "01.23.45.67.89"]', 'i'),
            ('email_standard', 'Email Standard', r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}', 
             'Adresses email standard', '["test@example.com", "user.name@domain.fr"]', 'i'),
            ('french_social_security', 'Num√©ro S√©curit√© Sociale', r'\d{1}\s?\d{2}\s?\d{2}\s?\d{2}\s?\d{3}\s?\d{3}\s?\d{2}', 
             'Num√©ro de s√©curit√© sociale fran√ßais', '["1 85 03 75 123 456 78", "185037512345678"]', ''),
            ('credit_card', 'Carte Bancaire', r'\d{4}[\s\-]?\d{4}[\s\-]?\d{4}[\s\-]?\d{4}', 
             'Num√©ros de carte bancaire', '["1234 5678 9012 3456", "1234-5678-9012-3456"]', ''),
            ('french_iban', 'IBAN Fran√ßais', r'FR\d{2}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{4}\s?\d{3}', 
             'IBAN fran√ßais', '["FR14 2004 1010 0505 0001 3M02 606"]', 'i'),
            ('french_date', 'Date Fran√ßaise', r'\d{1,2}[\/\-\.]\d{1,2}[\/\-\.]\d{4}', 
             'Dates au format fran√ßais', '["15/03/1985", "15-03-1985", "15.03.1985"]', ''),
            ('french_postal_code', 'Code Postal', r'\d{5}', 
             'Code postal fran√ßais', '["75001", "69000", "13000"]', '')
        ]
        
        cursor.executemany('''
            INSERT OR IGNORE INTO regex_patterns (name, display_name, pattern, description, test_examples, flags)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', regex_patterns_data)
        
        # Types d'entit√©s NER
        logger.info("Insertion des types d'entit√©s NER...")
        
        ner_types_data = [
            ('spacy', 'PERSON', 'Personne', 'Noms de personnes d√©tect√©s par spaCy'),
            ('spacy', 'GPE', 'Entit√© G√©opolitique', 'Pays, villes, r√©gions'),
            ('spacy', 'ORG', 'Organisation', 'Entreprises, institutions'),
            ('spacy', 'DATE', 'Date', 'Dates et expressions temporelles'),
            ('spacy', 'MONEY', 'Montant', 'Montants mon√©taires'),
            ('bert', 'PER', 'Personne', 'Noms de personnes d√©tect√©s par BERT'),
            ('bert', 'LOC', 'Lieu', 'Lieux g√©ographiques'),
            ('bert', 'ORG', 'Organisation', 'Organisations et entreprises'),
            ('camembert', 'PER', 'Personne', 'Noms de personnes d√©tect√©s par CamemBERT'),
            ('camembert', 'LOC', 'Lieu', 'Lieux g√©ographiques'),
            ('camembert', 'ORG', 'Organisation', 'Organisations et entreprises'),
            ('presidio', 'PERSON', 'Personne', 'Noms de personnes d√©tect√©s par Presidio'),
            ('presidio', 'EMAIL_ADDRESS', 'Email', 'Adresses email'),
            ('presidio', 'PHONE_NUMBER', 'T√©l√©phone', 'Num√©ros de t√©l√©phone'),
            ('presidio', 'CREDIT_CARD', 'Carte Bancaire', 'Num√©ros de carte bancaire')
        ]
        
        cursor.executemany('''
            INSERT OR IGNORE INTO ner_entity_types (model_name, entity_type, display_name, description)
            VALUES (?, ?, ?, ?)
        ''', ner_types_data)
        
        # Configuration des champs PII par d√©faut
        logger.info("Configuration des champs PII...")
        
        # R√©cup√©ration des IDs des guard_types
        cursor.execute("SELECT id, name FROM guard_types")
        guard_type_ids = {name: id for id, name in cursor.fetchall()}
        
        # Champs TypeA - Donn√©es Personnelles Identifiantes
        typea_fields = [
            (guard_type_ids['TypeA'], 'name', 'Nom Complet', 'hybrid', 'Jean Dupont', None, 'PERSON', 0.7, 1),
            (guard_type_ids['TypeA'], 'firstname', 'Pr√©nom', 'ner', 'Jean', None, 'PERSON', 0.7, 2),
            (guard_type_ids['TypeA'], 'birth_date', 'Date de Naissance', 'regex', '15/03/1985', 'french_date', None, 0.8, 3),
            (guard_type_ids['TypeA'], 'social_security', 'Num√©ro S√©curit√© Sociale', 'regex', '1 85 03 75 123 456 78', 'french_social_security', None, 0.9, 4),
            (guard_type_ids['TypeA'], 'id_card', 'Carte d\'Identit√©', 'regex', 'CNI 123456789', '[A-Z]{2,3}\\s?\\d{6,9}', None, 0.8, 5),
            (guard_type_ids['TypeA'], 'passport', 'Passeport', 'regex', '18FR12345', '\\d{2}[A-Z]{2}\\d{5}', None, 0.8, 6),
            (guard_type_ids['TypeA'], 'driving_license', 'Permis de Conduire', 'regex', '123456789ABC', '\\d{9,12}[A-Z]*', None, 0.8, 7)
        ]
        
        # Champs TypeB - Donn√©es Financi√®res
        typeb_fields = [
            (guard_type_ids['TypeB'], 'credit_card', 'Carte Bancaire', 'regex', '5555 5555 5555 4444', 'credit_card', None, 0.9, 1),
            (guard_type_ids['TypeB'], 'iban', 'IBAN', 'regex', 'FR14 2004 1010 0505 0001 3M02 606', 'french_iban', None, 0.9, 2),
            (guard_type_ids['TypeB'], 'bank_account', 'Compte Bancaire', 'regex', '20041 01005 05000013M02 60', '\\d{5}\\s?\\d{5}\\s?\\d{11}\\s?\\d{2,3}', None, 0.8, 3),
            (guard_type_ids['TypeB'], 'cvv', 'Code S√©curit√©', 'regex', '123', '\\d{3,4}', None, 0.9, 4)
        ]
        
        # Champs InfoPerso - Donn√©es de Contact
        infoperso_fields = [
            (guard_type_ids['InfoPerso'], 'email', 'Email', 'regex', 'contact@example.com', 'email_standard', None, 0.9, 1),
            (guard_type_ids['InfoPerso'], 'phone', 'T√©l√©phone', 'regex', '+33 6 12 34 56 78', 'french_phone', None, 0.8, 2),
            (guard_type_ids['InfoPerso'], 'address', 'Adresse', 'ner', '123 Rue de la R√©publique', None, 'LOC', 0.7, 3),
            (guard_type_ids['InfoPerso'], 'postal_code', 'Code Postal', 'regex', '75001', 'french_postal_code', None, 0.8, 4),
            (guard_type_ids['InfoPerso'], 'company', 'Entreprise', 'ner', 'TechCorp SARL', None, 'ORG', 0.7, 5),
            (guard_type_ids['InfoPerso'], 'ip_address', 'Adresse IP', 'regex', '192.168.1.1', '\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}', None, 0.8, 6)
        ]
        
        all_fields = typea_fields + typeb_fields + infoperso_fields
        
        cursor.executemany('''
            INSERT OR IGNORE INTO pii_fields 
            (guard_type_id, field_name, display_name, detection_type, example_value, regex_pattern, ner_entity_type, confidence_threshold, priority)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', all_fields)
        
        # Valider les changements
        conn.commit()
        logger.info(f"‚úÖ Base de donn√©es initialis√©e avec succ√®s : {db_path}")
        
        # Afficher un r√©sum√©
        cursor.execute("SELECT COUNT(*) FROM guard_types")
        guard_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM pii_fields")
        field_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM regex_patterns")
        pattern_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM ner_entity_types")
        ner_count = cursor.fetchone()[0]
        
        logger.info(f"üìä R√©sum√© de la base de donn√©es:")
        logger.info(f"   - {guard_count} types de protection")
        logger.info(f"   - {field_count} champs PII configur√©s")
        logger.info(f"   - {pattern_count} patterns regex")
        logger.info(f"   - {ner_count} types d'entit√©s NER")
        
        # Affichage d√©taill√© des configurations
        logger.info("\nüìã Configuration des types de protection:")
        for guard_name in ['TypeA', 'TypeB', 'InfoPerso']:
            cursor.execute('''
                SELECT COUNT(*) FROM pii_fields pf
                JOIN guard_types gt ON pf.guard_type_id = gt.id
                WHERE gt.name = ?
            ''', (guard_name,))
            field_count = cursor.fetchone()[0]
            cursor.execute('SELECT display_name FROM guard_types WHERE name = ?', (guard_name,))
            display_name = cursor.fetchone()[0]
            logger.info(f"   ‚Ä¢ {guard_name} ({display_name}): {field_count} champs")
        
        logger.info("\nüéØ Le syst√®me est maintenant configur√© avec:")
        logger.info("   ‚Ä¢ Configuration dynamique compl√®te")
        logger.info("   ‚Ä¢ Support du format: \"phone\":{\"type\":\"regex\",\"exemple\":\"+33 6 45 67 89 12\",\"pattern\":...}")
        logger.info("   ‚Ä¢ API CRUD pour g√©rer les types et champs")
        logger.info("   ‚Ä¢ Interface utilisateur pour ajouter/modifier des attributs")
        
        logger.info("\nüöÄ Pour d√©marrer le syst√®me:")
        logger.info("   1. Backend: cd backend && uvicorn app.main:app --reload")
        logger.info("   2. Frontend: cd frontend && npm start")
        logger.info("   3. Configuration: http://localhost:8000/docs (API) ou http://localhost:3000")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'initialisation : {e}")
        raise
    
    finally:
        if conn:
            conn.close()

def show_database_content():
    """Affiche le contenu de la base de donn√©es pour v√©rification"""
    db_path = Path("backend/app/database/ai_guards.db")
    
    if not db_path.exists():
        logger.error("‚ùå Base de donn√©es non trouv√©e. Ex√©cutez d'abord init_database()")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("\n" + "="*60)
        print("üìã CONTENU DE LA BASE DE DONN√âES AI-GUARDS")
        print("="*60)
        
        # Guard Types
        cursor.execute("SELECT * FROM guard_types")
        guard_types = cursor.fetchall()
        print(f"\nüî∞ TYPES DE PROTECTION ({len(guard_types)}):")
        for gt in guard_types:
            print(f"   {gt[1]} - {gt[2]} {gt[4]}")
        
        # PII Fields par type
        for guard_type in ['TypeA', 'TypeB', 'InfoPerso']:
            cursor.execute('''
                SELECT pf.field_name, pf.display_name, pf.detection_type, pf.example_value, 
                       pf.regex_pattern, pf.ner_entity_type, pf.confidence_threshold
                FROM pii_fields pf
                JOIN guard_types gt ON pf.guard_type_id = gt.id
                WHERE gt.name = ?
                ORDER BY pf.priority
            ''', (guard_type,))
            fields = cursor.fetchall()
            
            cursor.execute('SELECT display_name, icon FROM guard_types WHERE name = ?', (guard_type,))
            display_info = cursor.fetchone()
            
            print(f"\n{display_info[1]} {guard_type.upper()} - {display_info[0]} ({len(fields)} champs):")
            for field in fields:
                field_name, display_name, det_type, example, regex_pattern, ner_type, confidence = field
                print(f"   ‚Ä¢ {field_name}:")
                print(f"     - Nom: {display_name}")
                print(f"     - Type: {det_type}")
                print(f"     - Exemple: {example}")
                if regex_pattern:
                    print(f"     - Pattern: {regex_pattern}")
                if ner_type:
                    print(f"     - Entit√© NER: {ner_type}")
                print(f"     - Confiance: {confidence}")
        
        # Patterns Regex
        cursor.execute("SELECT name, display_name, pattern, description FROM regex_patterns")
        patterns = cursor.fetchall()
        print(f"\nüî§ PATTERNS REGEX ({len(patterns)}):")
        for pattern in patterns:
            print(f"   ‚Ä¢ {pattern[0]} ({pattern[1]})")
            print(f"     Pattern: {pattern[2]}")
            print(f"     Description: {pattern[3]}")
        
        print("\n" + "="*60)
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de la lecture : {e}")
    finally:
        if conn:
            conn.close()

if __name__ == "__main__":
    print("üöÄ Initialisation de la base de donn√©es AI-Guards...")
    
    # Initialiser la base de donn√©es
    success = init_database()
    
    if success:
        print("\n‚úÖ Initialisation r√©ussie!")
        
        # Afficher le contenu pour v√©rification
        show_database_content()
        
        # Instructions finales
        print("\n" + "="*60)
        print("üéØ SYST√àME DYNAMIQUE CONFIGUR√â")
        print("="*60)
        print("\nVotre syst√®me AI-Guards est maintenant enti√®rement dynamique!")
        print("\nüìå Fonctionnalit√©s disponibles:")
        print("   ‚Ä¢ Ajouter des attributs dans des types existants")
        print("   ‚Ä¢ Cr√©er de nouveaux types de protection")
        print("   ‚Ä¢ Modifier les patterns et configurations")
        print("   ‚Ä¢ Format exact support√©: \"phone\":{\"type\":\"regex\",\"exemple\":\"+33 6 12 34 56 78\",\"pattern\":...}")
        
        print("\nüîß API disponibles:")
        print("   ‚Ä¢ GET /api/config/guard-types - Liste tous les types")
        print("   ‚Ä¢ POST /api/config/guard-types - Cr√©er nouveau type")
        print("   ‚Ä¢ POST /api/config/pii-fields - Ajouter nouveau champ")
        print("   ‚Ä¢ GET /api/config/pii-fields/{guard_type} - Champs d'un type")
        
        print("\nüåê Pour d√©marrer:")
        print("   1. cd backend && uvicorn app.main:app --reload")
        print("   2. cd frontend && npm start")
        print("   3. Ouvrir http://localhost:3000 pour l'interface")
        print("   4. API documentation: http://localhost:8000/docs")
